In Java exceptions and errors are both subclasses of the `Throwable` class, 
but they serve different purposes and have distinct characteristics.

Exceptions:

Exceptions are events that occur during the execution of a program that disrupt the normal flow of 
instructions. They are typically conditions that a program can anticipate and handle.
Example of an Exception:
java
public class ExceptionExample {
    public static void main(String[] args) {
        try {
            int[] numbers = {1, 2, 3};
            System.out.println(numbers[5]); // This will throw an ArrayIndexOutOfBoundsException
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Caught an exception: " + e.getMessage());
        }
    }
}

There are 2 types of Exceptions
1)Checked Exceptions: 
Checked exceptions are exceptions that are checked at compile time. This means that the compiler verifies whether 
these exceptions are properly handled or declared in the method signature.

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ArithmeticCheckedExceptionExample {
    public static void main(String[] args) {
    Scanner s= new Scanner(System.in);
        
        try {
            System.out.print("Enter the numerator: ");
            int numerator = s.nextInt();
            System.out.print("Enter the denominator: ");
            int denominator = s.nextInt();

			// Perform division
            int result = numerator / denominator;
            System.out.println("Result: " + result);
        } catch (IOException e) {
            System.out.println("Caught an IOException: " + e.getMessage());
        } catch (ArithmeticException e) {
            System.out.println("Caught an ArithmeticException: Cannot divide by zero.");
        } catch (NumberFormatException e) {
            System.out.println("Caught a NumberFormatException: Please enter valid integers.");
        }
    }
}

2)Unchecked exceptions:
Unchecked exceptions are exceptions that are not checked at compile time. 
They are subclasses of RuntimeException and Error. 
The compiler does not require these exceptions to be handled or declared.

public class UncheckedExceptionExample {
    public static void main(String[] args) {
        try {
            int[] numbers = {1, 2, 3};
            System.out.println(numbers[5]); // This will throw an ArrayIndexOutOfBoundsException
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Caught an unchecked exception: " + e.getMessage());
        }
    }
}

Errors

Definition: 
In Java, an error is a serious problem that occurs during the execution of a program. 
Errors usually indicate issues that the program can't handle or recover from.
-> Errors are like major breakdowns. They happen when something goes fundamentally wrong, 
Such as running out of system resources
-> Unlike exceptions (which you can catch and deal with), errors are usually not meant to be 
fixed by your program. They indicate situations where the program can’t continue running safely.

Common Types of Errors:

OutOfMemoryError: 
This happens when your program tries to use more memory than is available. 
It's like trying to fit too much stuff in a suitcase—eventually, it just won’t close.

StackOverflowError: This occurs when there are too many nested method calls, 
Often due to infinite recursion (like getting stuck in a loop where you keep asking the same question).

Example of an Error:
import java.util.ArrayList;

public class ErrorTest {

	public static void main(String[] args) {
		// Create a list to hold a large number of objects
		ArrayList<int[]> list = new ArrayList<>();

		try {
			while (true) {
				// Continuously add large arrays to the list
				// Each int array has 1 million integers
				list.add(new int[1_000_000]);
				System.out.println("Added another array. Size: " + list.size());
			}
		} catch (OutOfMemoryError e) {
			// Catch the OutOfMemoryError and print a message
			System.out.println("Caught an OutOfMemoryError: " + e.getMessage());
		}

	}
}


